% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RcppExports.R
\name{FastLaplaceKron}
\alias{FastLaplaceKron}
\title{Implements the fast Laplace Kronecker algorithm.}
\usage{
FastLaplaceKron(A, B, y, sigma2, eta, roundit = 0L, verbose = 0L)
}
\arguments{
\item{A}{left measurement matrix.}

\item{B}{right measurement matrix.}

\item{y}{CS measurements.}

\item{sigma2}{initial noise variance.}

\item{eta}{threshold in determining convergence of marginal likelihood.}

\item{roundit}{whether or not to round the marginal likelihood, in order to
avoid machine precision error when comparing across platforms.}

\item{verbose}{print to screen which basis are added, re-estimated, or deleted.}
}
\value{
A list containing the following elements:
\tabular{lll}{
  \code{weights} \tab \tab sparse weights\cr
  \code{used} \tab \tab the positions of sparse weights\cr
  \code{sigma2} \tab \tab re-estimated noise variance\cr
  \code{errbars} \tab \tab one standard deviation around the sparse weights\cr
  \code{alpha} \tab \tab sparse hyperparameters (1/gamma)
}
}
\description{
This code implements the fast Laplace Kronecker algorithm based on the
  original fast Laplace algorithm and [1]. The algorithm is essentially the
  same as the fast Laplace algorithm, with the difference that PHI is assumed
  to have a Kronecker structure made up of A and B (kron(B, A)).
  This implies that PHI can be represented by a much smaller dimension and
  therefore the speed of matrix multiplication involving PHI is increased.
}
\references{
[1] Cesar F. Caiafa and Andrzej Cichocki, "Computing Sparse
Representations of Multidimensional Signals Using Kronecker Bases," in Neural
Computation, vol. 25, no. 1, pp. 186-220, 2013.
}

