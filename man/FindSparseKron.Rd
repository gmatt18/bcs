% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/find_sparse_kron.R
\name{FindSparseKron}
\alias{FindSparseKron}
\title{Implements the fast Laplace Kronecker algorithm.}
\usage{
FindSparseKron(A, B, y, matrix.return = T, eta = 1e-08, roundit = FALSE,
  verbose = FALSE)
}
\arguments{
\item{A}{left measurement matrix.}

\item{B}{right measurement matrix.}

\item{y}{sample from original signal.}

\item{matrix.return}{whether or not to return sparse signal in matrix form.}

\item{eta}{tolerance level in determining convergence of marginal likelihood.}

\item{roundit}{whether or not to round the marginal likelihood, in order to
avoid machine precision error when comparing across platforms.}

\item{verbose}{print to screen which basis are added, re-estimated, or deleted.}
}
\value{
The sparse signal as found by the fast Laplace algorithm.
}
\description{
Given samples from some signal and a measurement matrix with Kronecker
structure, find the sparse respresentation of the signal using Kronecker
compressive sensing. Note that this function is a convenient wrapper for the
function \code{\link{FastLaplaceKron}}.
}
\details{
The fast Laplace Kronecker algorithm is a method used to solve the compressive
sensing problem when the signal is of a large dimension. This typically occurs
when working with images where even a relatively small image can require a large
measurement matrix when the image is flattened. For example, take the
\eqn{M x M} image \eqn{Y}. Let \eqn{y} equal the flattened \eqn{Y} image, with
dimensions \eqn{M^2 x 1}. Using the original fast Laplace algorithm would
require a \eqn{N x M^2} measurement matrix PHI. However, if it is
assumed that the measurement matrix PHI has a Kronecker structure made up of
matrices A, B then we can write:
\deqn{PHI y = kron(B,A) y = AYB'}

which provides a more simple calculation that saves time and memory.
See [1] for details.
}
\references{
[1] Cesar F. Caiafa and Andrzej Cichocki, "Computing Sparse
Representations of Multidimensional Signals Using Kronecker Bases," in Neural
Computation, vol. 25, no. 1, pp. 186-220, 2013.
}

